3.5.2 メモリ使用量

* 瞬間アクティブメモリ量
* 瞬間メモリ消費量

図で説明


3.5.3 償却的計算量

キューの実行を例に考えると、計算量は以下のように表現できる
挿入と削除の列の全体的な実行時間: O(n)
n個の操作の列の実行総時間: O(f(n))
償却的計算量: O(f(n)/n)

* 償却的計算量 対 最悪時計算量

計算機の行う処理によっては最悪時計算量を考慮する必要がある
** 実行時間が人命に関わる
** ゲームなどのように反応時間が一様でなければならない

* 銀行家の方法と 物理学者の方法
償却的計算量の計算方法には大きく2つある。

** 銀行家の方法
実行時間、メモリ空間を預金になぞらえて、
リソースが確保できる事がわかってから実行が許可される

** 物理学者の方法
ある時点での計算コストを海抜高度に例えて説明。
ポテンシャル関数があるという前提で、
処理開始時のポテンシャルと終了時のポテンシャルの差を全体の計算量とする


3.5.4 性能についての考察

コンピュータの進化によって、計算リソースはどんどん安価になっているという話

* ムーアの法則
集積回路の集積度はほぼ18ヶ月ごとに倍になる

御しやすい問題=効率的なアルゴリズムを使用していれば、
計算コストの心配はしなくても大丈夫そう

* 御しにくい問題
分野によっては高価な計算を要求される事もある
** グラフィック演算など、計算量が膨大なもの
** NP(非決定性多項式時間)完全問題

* 最適化
プログラムはある程度までは性能を高めること(最適化)が容易にできるが、
程度が限定されているので、ある時点での諦めも必要。

最適化する急所を突き止める最善の技法はプロファイリング
